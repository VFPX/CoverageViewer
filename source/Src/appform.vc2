*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="appform.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS appform AS form 		&& General Application Form Class
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="lblTitle" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblNotes" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Y3dline1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntTimes" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntTimes.lblTimes" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblLogFile" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtLogFile" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="btnLogFileLU" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblProjFile" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtProjFile" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="btnProjFileLU" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="edtProcNotes" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntProcessNotes" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntProcessNotes.Label1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="btnProcess" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="btnClose" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkKeepTbls" UniqueID="" Timestamp="" />

	#INCLUDE "..\inc\appincl.h"
	*<DefinedPropArrayMethod>
		*m: changemsgline		&& Change an already displayed message line by appending text or replacing the entire line
		*m: chglastline		&& Replace the last line of the displayed text
		*m: chkproj		&& Check the log file to see if we need a project file entry
		*m: clearpermlines		&& Mark some or all permanent lines as now being disposable
		*m: displaymsg		&& Add a new message to the current display
		*m: displaynumber		&& Add a number to a line or change a currently displayed number
		*m: oktorun		&& Returns .T. if it's OK to run our process
		*m: setupform		&& Set ourselves up
		*m: showeditboxtestsample		&& Displays a string of column and line numbers (used for design time only)
		*p: obo		&& Our business object from ProcCntl.prg
		*p: oedit		&& Application edit object, properties: oWindow, cLogFile, cProFile
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	BackColor = 236,255,236
	Caption = "Coverage Analyzer"
	DoCreate = .T.
	Height = 428
	Icon = ..\pix\adsapp.ico
	Left = 4
	Name = "appform"
	obo = .NULL.		&& Our business object from ProcCntl.prg
	oedit = .F.		&& Application edit object, properties: oWindow, cLogFile, cProFile
	Top = 4
	Visible = .T.
	Width = 625
	_memberdata = <VFPData>
		<memberdata name="setupform" display="SetupForm"/>
		<memberdata name="chkproj" display="ChkProj"/>
		<memberdata name="oktorun" display="OKToRun"/>
		<memberdata name="changemsgline" display="ChangeMsgLine"/>
		<memberdata name="clearpermlines" display="ClearPermLines"/>
		<memberdata name="displaymsg" display="DisplayMsg"/>
		<memberdata name="displaynumber" display="DisplayNumber"/>
		<memberdata name="showeditboxtestsample" display="ShowEditBoxTestSample"/>
		<memberdata name="chglastline" type="method" display="ChgLastLine"/>
		<memberdata name="oedit" display="oEdit"/>
		<memberdata name="obo" display="oBO"/>
		</VFPData>		&& XML Metadata for customizable properties

	ADD OBJECT 'btnClose' AS ycmdbutton WITH ;
		BackColor = 253,217,189, ;
		Cancel = .T., ;
		Caption = "Close", ;
		Left = 502, ;
		Name = "btnClose", ;
		TabIndex = 6, ;
		Top = 381, ;
		Width = 88
		*< END OBJECT: ClassLib="..\libs\appcntls.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'btnLogFileLU' AS ylookupbtn WITH ;
		Caption = "", ;
		DownPicture = ..\pix\lookup.bmp, ;
		Left = 505, ;
		Name = "btnLogFileLU", ;
		TabIndex = 2, ;
		Top = 64
		*< END OBJECT: ClassLib="..\libs\appcntls.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'btnProcess' AS ycmdbutton WITH ;
		BackColor = 187,253,251, ;
		Caption = "Process Log", ;
		Default = .T., ;
		Enabled = .F., ;
		Left = 502, ;
		Name = "btnProcess", ;
		TabIndex = 5, ;
		Top = 349, ;
		Width = 88
		*< END OBJECT: ClassLib="..\libs\appcntls.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'btnProjFileLU' AS ylookupbtn WITH ;
		Caption = "", ;
		DownPicture = ..\pix\lookup.bmp, ;
		Left = 505, ;
		Name = "btnProjFileLU", ;
		TabIndex = 4, ;
		Top = 97
		*< END OBJECT: ClassLib="..\libs\appcntls.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'chkKeepTbls' AS checkbox WITH ;
		Alignment = 1, ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Keep Work Tables?", ;
		ControlSource = "THISFORM.oEdit.bKeepTbls", ;
		Height = 17, ;
		Left = 249, ;
		Name = "chkKeepTbls", ;
		TabIndex = 15, ;
		Top = 120, ;
		Width = 126
		*< END OBJECT: BaseClass="checkbox" />

	ADD OBJECT 'cntProcessNotes' AS zcontainer WITH ;
		BackColor = 255,255,213, ;
		Height = 21, ;
		Left = 260, ;
		Name = "cntProcessNotes", ;
		SpecialEffect = 0, ;
		TabIndex = 14, ;
		Top = 137, ;
		Width = 104
		*< END OBJECT: ClassLib="..\libs\appcntls.vcx" BaseClass="container" />

	ADD OBJECT 'cntProcessNotes.Label1' AS label WITH ;
		BackStyle = 0, ;
		Caption = "Process Notes", ;
		Height = 17, ;
		Left = 10, ;
		Name = "Label1", ;
		Top = 2, ;
		Width = 84
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'cntTimes' AS zcontainer WITH ;
		BackColor = 242,255,242, ;
		Height = 71, ;
		Left = 35, ;
		Name = "cntTimes", ;
		SpecialEffect = 0, ;
		TabIndex = 10, ;
		Top = 349, ;
		Width = 406
		*< END OBJECT: ClassLib="..\libs\appcntls.vcx" BaseClass="container" />

	ADD OBJECT 'cntTimes.lblTimes' AS label WITH ;
		Alignment = 2, ;
		BackStyle = 0, ;
		Caption = ("Please Note - Coverage times are reported by VFP and may be affected by other Windows' events. Best bet: run test after rebooting and with few other programs running."), ;
		FontSize = 10, ;
		Height = 51, ;
		Left = 20, ;
		Name = "lblTimes", ;
		Top = 10, ;
		Width = 366, ;
		WordWrap = .T.
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'edtProcNotes' AS yprocnotes WITH ;
		Enabled = .F., ;
		FontName = "Courier New", ;
		Height = 188, ;
		IntegralHeight = .T., ;
		Left = 64, ;
		Name = "edtProcNotes", ;
		ndispcols = 69, ;
		ndisprows = 12, ;
		TabIndex = 13, ;
		Top = 148, ;
		Width = 496
		*< END OBJECT: ClassLib="..\libs\appcntls.vcx" BaseClass="editbox" />

	ADD OBJECT 'lblLogFile' AS label WITH ;
		BackStyle = 0, ;
		Caption = "Log File:", ;
		FontSize = 10, ;
		Height = 18, ;
		Left = 100, ;
		Name = "lblLogFile", ;
		TabIndex = 11, ;
		Top = 66, ;
		Width = 52
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lblNotes' AS label WITH ;
		Alignment = 2, ;
		BackStyle = 0, ;
		Caption = ("Have your COVERAGE log file analyzed and put into a web page where links quickly let you drill down to fiind the slow bits."), ;
		FontSize = 10, ;
		Height = 34, ;
		Left = 231, ;
		Name = "lblNotes", ;
		TabIndex = 8, ;
		Top = 10, ;
		Width = 376, ;
		WordWrap = .T.
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lblProjFile' AS label WITH ;
		BackStyle = 0, ;
		Caption = "Project File:", ;
		FontSize = 10, ;
		Height = 18, ;
		Left = 80, ;
		Name = "lblProjFile", ;
		TabIndex = 12, ;
		Top = 99, ;
		Width = 72
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lblTitle' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		BorderStyle = 0, ;
		Caption = "Coverage Analyzer", ;
		FontBold = .T., ;
		FontItalic = .T., ;
		FontName = "Tahoma", ;
		FontSize = 12, ;
		Height = 21, ;
		Left = 17, ;
		Name = "lblTitle", ;
		TabIndex = 7, ;
		Top = 10, ;
		Width = 156
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'txtLogFile' AS ytextbox WITH ;
		ControlSource = "THISFORM.oEdit.cLogFile", ;
		Format = "T", ;
		Height = 23, ;
		Left = 156, ;
		Name = "txtLogFile", ;
		TabIndex = 1, ;
		Top = 64, ;
		Width = 345
		*< END OBJECT: ClassLib="..\libs\appcntls.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtProjFile' AS ytextbox WITH ;
		ControlSource = "THISFORM.oEdit.cProjFile", ;
		Enabled = .F., ;
		Format = "T", ;
		Height = 23, ;
		Left = 156, ;
		Name = "txtProjFile", ;
		TabIndex = 3, ;
		Top = 95, ;
		Width = 345
		*< END OBJECT: ClassLib="..\libs\appcntls.vcx" BaseClass="textbox" />

	ADD OBJECT 'Y3dline1' AS y3dline WITH ;
		Height = 2, ;
		Left = 47, ;
		Name = "Y3dline1", ;
		TabIndex = 9, ;
		Top = 51, ;
		Width = 530, ;
		lingraytop.Name = "lingraytop", ;
		lingraytop.Width = 530, ;
		linwhitebott.Name = "linwhitebott", ;
		linwhitebott.Width = 530
		*< END OBJECT: ClassLib="..\libs\appcntls.vcx" BaseClass="container" />
	
	PROCEDURE changemsgline		&& Change an already displayed message line by appending text or replacing the entire line
		LPARAMETERS cMsgBeg, cLine, bAdd
		RETURN THIS.edtProcNotes.ChangeMsgLine(cMsgBeg, cLine, bAdd)
	ENDPROC

	PROCEDURE chglastline		&& Replace the last line of the displayed text
		LPARAMETERS cLatestLine
		RETURN THIS.edtProcNotes.ChgLastLine(cLatestLine)
	ENDPROC

	PROCEDURE chkproj		&& Check the log file to see if we need a project file entry
		WITH THIS
		    .oEdit.bNeedProj = .oBO.ProjNeeded(.txtLogFile.Value)
		    IF .oEdit.bNeedProj
		        .txtprojFile.Enabled = .T.
		        IF .txtProjFile.Valid(.T.) = 1
		            .btnProcess.GotFocus()
		            .txtprojFile.bEntryIsOK = .T.
		        ELSE
		            .txtprojFile.bEntryIsOK = .F.
		        ENDIF
		    ELSE
		        .txtprojFile.bEntryIsOK = .T.
		    ENDIF
		ENDWITH
	ENDPROC

	PROCEDURE clearpermlines		&& Mark some or all permanent lines as now being disposable
		LPARAMETERS nKeepNumb
		RETURN THIS.edtProcNotes.ClearPermLines(nKeepNumb)
	ENDPROC

	PROCEDURE Destroy
		CLEAR EVENTS
		THIS.oEdit = NULL
		THIS.oBO = NULL
		DODEFAULT()
	ENDPROC

	PROCEDURE displaymsg		&& Add a new message to the current display
		LPARAMETERS cMsg, bUseLdgCR, bIsPerm
		RETURN THIS.edtProcNotes.DisplayMsg(cMsg, bUseLdgCR, bIsPerm)
	ENDPROC

	PROCEDURE displaynumber		&& Add a number to a line or change a currently displayed number
		LPARAMETERS xNumber
		RETURN THIS.edtProcNotes.DisplayNumber(xNumber)
	ENDPROC

	PROCEDURE Error
		LPARAMETERS nError, cMethod, nLine
		LOCAL aErrInfo[7], cMethName, cSys16, cCmd, oParent, bGotGlobal, ;
		  cAction, cHndlCmd, nChoice
		
		* Get the error info and define stuff about ourselves
		AERROR(aErrInfo)
		cMethName = THIS.Name + '.' + cMethod
		cSys16 = SYS(16)
		cCmd = MESSAGE(1)
		
		* First, do we have a parent?
		oParent = NULL
		IF PEMSTATUS(THIS, [Parent], 5) AND TYPE([THIS.Parent]) = [O] AND ;
		  PEMSTATUS(THIS.Parent, [Error], 5)
		    oParent = THIS.Parent
		ENDIF
		
		* Now, register the error if we have a global handler
		bGotGlobal = .F.
		IF TYPE('goError.Name') = 'C'
		    goError.RegisterError(nError, cMethName, nLine, @aErrInfo, cSys16, ;
		      THIS)
		    bGotGlobal = .T.
		ENDIF
		
		* Handle this error as best we can after assuming our return action
		cAction = 'RETURN'
		DO CASE
		
		* First, try the parent
		CASE NOT ISNULL(oParent)
		    cAction = oParent.Error(nError, cMethName, nLine)
		
		* Next, the global error handling object
		CASE bGotGlobal
		    cAction = goError.HandleError(nError, cMethName, nLine, @aErrInfo, ;
		      cSys16, THIS)
		
		* There may be some other global error handler.  So give it what it
		*   wants.  Caution: It may be called as a function or with a DO
		CASE NOT EMPTY( ON('ERROR') )
		    cHndlCmd = UPPER(ON('ERROR') )
		    cHndlCmd = STRTRAN( STRTRAN( STRTRAN( STRTRAN( STRTRAN( cHndlCmd, ;
		      'PROGRAM()', '"' + cMethName + '"'), ;
		      'ERROR()',   'nError'), ;
		      'LINENO()',  'nLine'), ;
		      'MESSAGE()', 'aErrInfo[2]'), ;
		      'SYS(2018)', 'aErrInfo[3]')
		    IF LEFT(cHndlCmd, 3) = [DO ]
		        &cHndlCmd
		    ELSE
		        cAction = &cHndlCmd
		    ENDIF
		OTHERWISE
		
		    * Nothing else left to do.  Ask if they want to Continue, Cancel or
		    *   get the debugger; this must only happen in test.  The
		    *   parameter MB_YESNOCANCEL = 3 + MB_ICONSTOP = 16 = 19
		    nChoice = MESSAGEBOX('Error #: ' + LTRIM(STR(nError)) + CHR(13) + ;
		      'Message: ' + aErrInfo[2] + CHR(13) + ;
		      'Line: ' + LTRIM(STR(nLine)) + CHR(13) + ;
		      'Code: ' + cCmd + CHR(13) + ;
		      'Method: ' + cMethName + CHR(13) + ;
		      'Object: ' + THIS.Name + CHR(13) + CHR(13) + ;
		      'Choose Yes to display the debugger, No to ' + ;
		      'Continue without the debugger, or Cancel to ' + ;
		      'cancel execution', 19, _VFP.Caption)
		
		    * If we're to debug, do it here and set for RETURN
		    DO CASE
		    CASE nChoice = 6            && IDYES
		        cAction = [RETURN]
		        DEBUG
		        SUSPEND
		    CASE nChoice = 7            && IDNO
		        cAction = [RETURN]
		    CASE nChoice = 2            && IDCANCEL
		        cAction = [CANCEL]
		    ENDCASE
		ENDCASE
		
		* Handle the return value but check the hierarchy first
		DO CASE
		CASE '.' $ cMethName
		    RETURN cAction              && Calling method
		CASE cAction = 'CLOSEFORM'
		    THISFORM.Release()
		CASE NOT EMPTY(cAction)         && RETURN, RETRY, CANCEL
		    &cAction                    && Do it
		ENDCASE
		RETURN                          && What else?
		
	ENDPROC

	PROCEDURE Init
		goApp.oAppEdit.oForm = THIS
		goProcess.oForm = THIS
		THIS.SetupForm()
		RETURN .T.
	ENDPROC

	PROCEDURE Load
		THIS.oEdit = goApp.oAppEdit
		THIS.oBO = goProcess
		
	ENDPROC

	PROCEDURE oktorun		&& Returns .T. if it's OK to run our process
		LOCAL bStartProc
		
		* Can we quickly start the process?
		WITH THIS
		    bStartProc = .txtLogFile.bEntryIsOK AND .txtProjFile.bEntryIsOK AND ;
		      THIS.oEdit.bGoToIt
		ENDWITH
		RETURN bStartProc
	ENDPROC

	PROCEDURE setupform		&& Set ourselves up
		LOCAL bStartProc
		
		* Do the log file validation. .T. = starting up. The Valid() also
		*    calls THIS.ChkProj which sets THIS.oEdit.bNeedProj and shows
		*    txtProjFile if needed.
		bStartProc = .F.
		WITH THIS
		    .txtLogFile.Valid(.T.)
		
		    * Check the project file if needed
		    IF .oEdit.bNeedProj
		        .txtProjFile.Valid(.T.)
		        .btnProcess.Enabled = .T.
		        .btnProcess.GotFocus()
		    ENDIF
		ENDWITH
		RETURN .T.
	ENDPROC

	PROCEDURE showeditboxtestsample		&& Displays a string of column and line numbers (used for design time only)
		THIS.edtProcNotes.ShowEditBoxTestSample()
	ENDPROC

	PROCEDURE btnClose.clickaction
		CLEAR EVENTS
		THISFORM.Release()
	ENDPROC

	PROCEDURE btnLogFileLU.clickaction
		LOCAL cExts, cFile
		cExts = 'Coverage Logs:*.*'
		cFile = GETFILE(cExts, 'Select Coverage Log File', 'OK', 0, 'Coverage Log File')
		THISFORM.txtLogFile.Value = cFile
		THISFORM.txtLogFile.SetFocus()
		THISFORM.txtLogFile.Refresh()
		RETURN (THISFORM.txtLogFile.Valid() = 1)
		
	ENDPROC

	PROCEDURE btnProcess.Click
		* Don't let an anxious user click too many times
		THIS.Enabled = .F.
		
		* Do our click action
		THIS.ClickAction()
		NODEFAULT
		
	ENDPROC

	PROCEDURE btnProcess.clickaction
		THISFORM.oBO.DoProcess()
	ENDPROC

	PROCEDURE btnProjFileLU.clickaction
		LOCAL cExts, cFile
		cExts = 'Project File:PJX'
		cFile = GETFILE(cExts, 'Select Project File', 'OK', 0, 'Project File')
		THISFORM.txtProjFile.Value = cFile
		THISFORM.txtProjFile.SetFocus()
		THISFORM.txtProjFile.Refresh()
		RETURN (THISFORM.txtProjFile.Valid() = 1)
		
	ENDPROC

	PROCEDURE edtProcNotes.Init
		RETURN DODEFAULT()
	ENDPROC

	PROCEDURE txtLogFile.Valid
		LPARAMETERS bIsStartup
		LOCAL cStatus, nDirLen, cValue
		
		* Check our entry
		cStatus = ''
		THIS.bEntryIsOK = .F.
		DO CASE
		CASE bIsStartup AND EMPTY(THIS.Value)
		    cStatus = 'W'   && B/G color yellow
		CASE EMPTY(THIS.Value)
		*!*        cStatus = 'E'   && Error, Red B/G
		*!*        THIS.cErrorMsg = 'A log file entry is needed, please re-enter'
		CASE NOT FILE(THIS.Value)
		    cStatus = 'E'
		    THIS.cErrorMsg = 'That log file does not exist, please re-enter'
		OTHERWISE
		    nDirLen = LEN(goApp.cStartupDir)
		    cValue = UPPER(THIS.Value)
		    IF LEN(cValue) >= nDirLen AND LEFT(cValue, nDirLen) = goApp.cStartupDir
		        THIS.Value = SUBSTR(THIS.Value, nDirLen)
		    ENDIF
		    THIS.bEntryIsOK = .T.
		ENDCASE
		
		* Set our B/G color as appropriate
		THIS.SetBGColor(cStatus)
		
		* Check to see if a project file entry is needed
		IF NOT EMPTY(THIS.Value)
		    THISFORM.ChkProj()
		ENDIF
		
		* Display our error messsage
		IF NOT EMPTY(THIS.cErrorMsg)
		    WAIT WINDOW THIS.cErrorMsg
		ENDIF
		
		* Done; we always let them out of the field
		NODEFAULT
		RETURN 1
	ENDPROC

	PROCEDURE txtProjFile.Valid
		LPARAMETERS bIsStartup
		LOCAL cStatus, nDirLen, cValue
		
		* Check our entry (we can't get here if we're disabled
		cStatus = ''
		THIS.bEntryIsOK = .F.
		DO CASE
		CASE bIsStartup AND THISFORM.oEdit.bNeedProj AND EMPTY(THIS.Value)
		    cStatus = 'W'   && B/G color yellow
		CASE THISFORM.oEdit.bNeedProj AND EMPTY(THIS.Value)
		    cStatus = 'E'   && Error, Red B/G
		    THIS.cErrorMsg = 'A progect file entry is needed, please re-enter'
		CASE THISFORM.oEdit.bNeedProj AND NOT FILE(THIS.Value)
		    cStatus = 'E'
		    THIS.cErrorMsg = 'That project file does not exist, please re-enter'
		CASE THISFORM.oEdit.bNeedProj AND NOT EMPTY(THIS.Value)
		    nDirLen = LEN(goApp.cStartupDir)
		    cValue = UPPER(THIS.Value)
		    IF LEN(cValue) >= nDirLen AND LEFT(cValue, nDirLen) = goApp.cStartupDir
		        THIS.Value = SUBSTR(THIS.Value, nDirLen)
		    ENDIF
		    THIS.bEntryIsOK = .T.
		OTHERWISE
		    THIS.bEntryIsOK = .T.
		ENDCASE
		
		* Set our B/G color as appropriate
		THIS.SetBGColor(cStatus)
		
		* Display our error messsage
		IF NOT THIS.bEntryIsOK
		    WAIT WINDOW THIS.cErrorMsg
		ENDIF
		
		* Done; we always let them out of the field
		NODEFAULT
		RETURN 1
	ENDPROC

ENDDEFINE
